// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  subscriptionId String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Site {
  id           String    @id @default(uuid())
  name         String
  userId       String
  url          String    @default("http://localhost:3000")
  contributors String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  images       Image[]   @relation("SiteToImage")
  galleries    Gallery[] @relation("SiteToGallery")
  apiKeys      ApiKey[]  @relation("SiteToApiKey")
}

model Gallery {
  id          String   @id @default(uuid())
  name        String
  description String
  siteId      String
  site        Site     @relation("SiteToGallery", fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images      Image[]  @relation("GalleryToImage")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id          String   @id @default(uuid())
  originalUrl String
  cdnUrl      String
  link        String
  alt         String
  description String
  tags        String[]
  siteId      String
  site        Site     @relation("SiteToImage", fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  galleryId   String
  gallery     Gallery  @relation("GalleryToImage", fields: [galleryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isArchived  Boolean
  isDraft     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([siteId])
  @@index([galleryId])
}

model TempLinkToken {
  id        String   @id @default(uuid())
  token     String
  siteId    String
  creatorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String
  siteId    String
  site      Site     @relation("SiteToApiKey", fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
